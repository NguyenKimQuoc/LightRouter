///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.30.1.6000 for 8051              26/Dec/2021  21:57:22
// Copyright 2004-2018 IAR Systems AB.
// PC-locked license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\MyLight\Source\zcl_MyLight.c
//    Command line       =  
//        -f C:\Users\QUOCKI~1\AppData\Local\Temp\EW9A35.tmp ("E:\Texas
//        Instruments\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\MyLight\Source\zcl_MyLight.c"
//        -lC "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\MyLight\CC2530DB\RouterEB\List"
//        -lA "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\MyLight\CC2530DB\RouterEB\List"
//        --diag_suppress Pe001,Pa010 -o "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\MyLight\CC2530DB\RouterEB\Obj"
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 --preinclude
//        "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\MyLight\CC2530DB\..\Source\preinclude.h"
//        -f "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\MyLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DRTR_NWK) -f "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\MyLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DZDAPP_CONFIG_PAN_ID=0xFFFF -DNWK_START_DELAY=100
//        -DEXTENDED_JOINING_RANDOM_MASK=0x007F -DBEACON_REQUEST_DELAY=100
//        -DBEACON_REQ_DELAY_MASK=0x00FF -DLINK_STATUS_JITTER_MASK=0x007F
//        -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_POLLED=3000
//        -DNWK_INDIRECT_MSG_TIMEOUT=7 -DMAX_RREQ_ENTRIES=8
//        -DAPSC_MAX_FRAME_RETRIES=3 -DNWK_MAX_DATA_RETRIES=2
//        -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9 -DAPS_MAX_GROUPS=16
//        -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0}
//        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000
//        -DENABLE_LED4_DISABLE_S1) -f "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\MyLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\MyLight\CC2530DB\" -I "E:\Texas
//        Instruments\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\MyLight\CC2530DB\..\Source\" -I
//        "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\MyLight\CC2530DB\..\..\Source\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\MyLight\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\MyLight\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\MyLight\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\MyLight\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\MyLight\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\MyLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\MyLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\MyLight\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\MyLight\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\MyLight\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\MyLight\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\MyLight\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\MyLight\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\MyLight\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\MyLight\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\MyLight\CC2530DB\..\..\..\..\..\Components\stack\gp\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\MyLight\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\MyLight\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\MyLight\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\MyLight\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\MyLight\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\MyLight\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\MyLight\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -Ohz --require_prototypes)
//    Locale             =  English_USA.1252
//    List file          =  
//        E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\MyLight\CC2530DB\RouterEB\List\zcl_MyLight.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME zcl_MyLight

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        FUNCTION `??zclMyLight_BasicResetCB::?relay`,0203H
        FUNCTION `??zclMyLight_BindNotification::?relay`,0203H
        PUBLIC `??zclMyLight_Init::?relay`
        FUNCTION `??zclMyLight_Init::?relay`,0203H
        FUNCTION `??zclMyLight_ProcessCommissioningStatus::?relay`,0203H
        FUNCTION `??zclMyLight_ProcessIdentifyTimeChange::?relay`,0203H
        PUBLIC `??zclMyLight_ReportLed::?relay`
        FUNCTION `??zclMyLight_ReportLed::?relay`,0203H
        PUBLIC `??zclMyLight_event_loop::?relay`
        FUNCTION `??zclMyLight_event_loop::?relay`,0203H
        FUNCTION `??zclSampleApp_BatteryWarningCB::?relay`,0203H
        PUBLIC HumidityValue
        PUBWEAK P0DIR
        PUBWEAK P0SEL
        PUBLIC SeqNum
        PUBWEAK __Constant_bb8
        PUBLIC gPermitDuration
        PUBLIC giGenAppScreenMode
        FUNCTION zclMyLight_BasicResetCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION zclMyLight_BindNotification,0603H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC zclMyLight_DstAddr
        PUBLIC zclMyLight_Init
        FUNCTION zclMyLight_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        PUBLIC zclMyLight_NwkState
        FUNCTION zclMyLight_ProcessCommissioningStatus,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION zclMyLight_ProcessIdentifyTimeChange,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zclMyLight_ReportLed
        FUNCTION zclMyLight_ReportLed,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 17, STACK
        PUBLIC zclMyLight_TaskID
        PUBLIC zclMyLight_event_loop
        FUNCTION zclMyLight_event_loop,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        FUNCTION zclSampleApp_BatteryWarningCB,0603H
        ARGFRAME XSTACK, 0, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
HalLedBlink         SYMBOL "HalLedBlink"
`??HalLedBlink::?relay` SYMBOL "?relay", HalLedBlink
HalLedSet           SYMBOL "HalLedSet"
`??HalLedSet::?relay` SYMBOL "?relay", HalLedSet
RegisterForKeys     SYMBOL "RegisterForKeys"
`??RegisterForKeys::?relay` SYMBOL "?relay", RegisterForKeys
RegisterVoltageWarningCB SYMBOL "RegisterVoltageWarningCB"
`??RegisterVoltageWarningCB::?relay` SYMBOL "?relay", RegisterVoltageWarningCB
UART_Init           SYMBOL "UART_Init"
`??UART_Init::?relay` SYMBOL "?relay", UART_Init
UART_String         SYMBOL "UART_String"
`??UART_String::?relay` SYMBOL "?relay", UART_String
bdb_RegisterBindNotificationCB SYMBOL "bdb_RegisterBindNotificationCB"
`??bdb_RegisterBindNotificationCB::?relay` SYMBOL "?relay", bdb_RegisterBindNotificationCB
bdb_RegisterCommissioningStatusCB SYMBOL "bdb_RegisterCommissioningStatusCB"
`??bdb_RegisterCommissioningStatusCB::?relay` SYMBOL "?relay", bdb_RegisterCommissioningStatusCB
bdb_RegisterIdentifyTimeChangeCB SYMBOL "bdb_RegisterIdentifyTimeChangeCB"
`??bdb_RegisterIdentifyTimeChangeCB::?relay` SYMBOL "?relay", bdb_RegisterIdentifyTimeChangeCB
bdb_RegisterSimpleDescriptor SYMBOL "bdb_RegisterSimpleDescriptor"
`??bdb_RegisterSimpleDescriptor::?relay` SYMBOL "?relay", bdb_RegisterSimpleDescriptor
bdb_StartCommissioning SYMBOL "bdb_StartCommissioning"
`??bdb_StartCommissioning::?relay` SYMBOL "?relay", bdb_StartCommissioning
bdb_resetLocalAction SYMBOL "bdb_resetLocalAction"
`??bdb_resetLocalAction::?relay` SYMBOL "?relay", bdb_resetLocalAction
osal_mem_alloc      SYMBOL "osal_mem_alloc"
`??osal_mem_alloc::?relay` SYMBOL "?relay", osal_mem_alloc
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
`??osal_msg_deallocate::?relay` SYMBOL "?relay", osal_msg_deallocate
osal_msg_receive    SYMBOL "osal_msg_receive"
`??osal_msg_receive::?relay` SYMBOL "?relay", osal_msg_receive
osal_start_reload_timer SYMBOL "osal_start_reload_timer"
`??osal_start_reload_timer::?relay` SYMBOL "?relay", osal_start_reload_timer
zclGeneral_RegisterCmdCallbacks SYMBOL "zclGeneral_RegisterCmdCallbacks"
`??zclGeneral_RegisterCmdCallbacks::?relay` SYMBOL "?relay", zclGeneral_RegisterCmdCallbacks
zclMyLight_ResetAttributesToDefaultValues SYMBOL "zclMyLight_ResetAttributesToDefaultValues"
`??zclMyLight_ResetAttributesToDefaultValues::?r` SYMBOL "?relay", zclMyLight_ResetAttributesToDefaultValues
zcl_SendReportCmd   SYMBOL "zcl_SendReportCmd"
`??zcl_SendReportCmd::?relay` SYMBOL "?relay", zcl_SendReportCmd
zcl_registerAttrList SYMBOL "zcl_registerAttrList"
`??zcl_registerAttrList::?relay` SYMBOL "?relay", zcl_registerAttrList
zcl_registerForMsg  SYMBOL "zcl_registerForMsg"
`??zcl_registerForMsg::?relay` SYMBOL "?relay", zcl_registerForMsg
zclMyLight_Init     SYMBOL "zclMyLight_Init"
`??zclMyLight_Init::?relay` SYMBOL "?relay", zclMyLight_Init
zclMyLight_ReportLed SYMBOL "zclMyLight_ReportLed"
`??zclMyLight_ReportLed::?relay` SYMBOL "?relay", zclMyLight_ReportLed
zclMyLight_event_loop SYMBOL "zclMyLight_event_loop"
`??zclMyLight_event_loop::?relay` SYMBOL "?relay", zclMyLight_event_loop

        EXTERN `??HalLedBlink::?relay`
        FUNCTION `??HalLedBlink::?relay`,00H
        EXTERN `??HalLedSet::?relay`
        FUNCTION `??HalLedSet::?relay`,00H
        EXTERN `??RegisterForKeys::?relay`
        FUNCTION `??RegisterForKeys::?relay`,00H
        EXTERN `??RegisterVoltageWarningCB::?relay`
        FUNCTION `??RegisterVoltageWarningCB::?relay`,00H
        EXTERN `??UART_Init::?relay`
        FUNCTION `??UART_Init::?relay`,00H
        EXTERN `??UART_String::?relay`
        FUNCTION `??UART_String::?relay`,00H
        EXTERN `??bdb_RegisterBindNotificationCB::?relay`
        FUNCTION `??bdb_RegisterBindNotificationCB::?relay`,00H
        EXTERN `??bdb_RegisterCommissioningStatusCB::?relay`
        FUNCTION `??bdb_RegisterCommissioningStatusCB::?relay`,00H
        EXTERN `??bdb_RegisterIdentifyTimeChangeCB::?relay`
        FUNCTION `??bdb_RegisterIdentifyTimeChangeCB::?relay`,00H
        EXTERN `??bdb_RegisterSimpleDescriptor::?relay`
        FUNCTION `??bdb_RegisterSimpleDescriptor::?relay`,00H
        EXTERN `??bdb_StartCommissioning::?relay`
        FUNCTION `??bdb_StartCommissioning::?relay`,00H
        EXTERN `??bdb_resetLocalAction::?relay`
        FUNCTION `??bdb_resetLocalAction::?relay`,00H
        EXTERN `??osal_mem_alloc::?relay`
        FUNCTION `??osal_mem_alloc::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_msg_deallocate::?relay`
        FUNCTION `??osal_msg_deallocate::?relay`,00H
        EXTERN `??osal_msg_receive::?relay`
        FUNCTION `??osal_msg_receive::?relay`,00H
        EXTERN `??osal_start_reload_timer::?relay`
        FUNCTION `??osal_start_reload_timer::?relay`,00H
        EXTERN `??zclGeneral_RegisterCmdCallbacks::?relay`
        FUNCTION `??zclGeneral_RegisterCmdCallbacks::?relay`,00H
        EXTERN `??zclMyLight_ResetAttributesToDefaultValues::?r`
        FUNCTION `??zclMyLight_ResetAttributesToDefaultValues::?r`,00H
        EXTERN `??zcl_SendReportCmd::?relay`
        FUNCTION `??zcl_SendReportCmd::?relay`,00H
        EXTERN `??zcl_registerAttrList::?relay`
        FUNCTION `??zcl_registerAttrList::?relay`,00H
        EXTERN `??zcl_registerForMsg::?relay`
        FUNCTION `??zcl_registerForMsg::?relay`,00H
        EXTERN HalLedBlink
        FUNCTION HalLedBlink,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterVoltageWarningCB
        FUNCTION RegisterVoltageWarningCB,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN UART_Init
        FUNCTION UART_Init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN UART_String
        FUNCTION UART_String,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_RegisterBindNotificationCB
        FUNCTION bdb_RegisterBindNotificationCB,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_RegisterCommissioningStatusCB
        FUNCTION bdb_RegisterCommissioningStatusCB,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_RegisterIdentifyTimeChangeCB
        FUNCTION bdb_RegisterIdentifyTimeChangeCB,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_RegisterSimpleDescriptor
        FUNCTION bdb_RegisterSimpleDescriptor,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_StartCommissioning
        FUNCTION bdb_StartCommissioning,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_resetLocalAction
        FUNCTION bdb_resetLocalAction,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ledState
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_reload_timer
        FUNCTION osal_start_reload_timer,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclGeneral_RegisterCmdCallbacks
        FUNCTION zclGeneral_RegisterCmdCallbacks,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclMyLight_Attrs
        EXTERN zclMyLight_IdentifyTime
        EXTERN zclMyLight_NumAttributes
        EXTERN zclMyLight_ResetAttributesToDefaultValues
        FUNCTION zclMyLight_ResetAttributesToDefaultValues,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclMyLight_SimpleDesc
        EXTERN zcl_SendReportCmd
        FUNCTION zcl_SendReportCmd,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerAttrList
        FUNCTION zcl_registerAttrList,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerForMsg
        FUNCTION zcl_registerForMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC


        ASEGN SFR_AN:DATA:NOROOT,0f3H
// unsigned char volatile __sfr P0SEL
P0SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0fdH
// unsigned char volatile __sfr P0DIR
P0DIR:
        DATA8
        DS 1
// E:\Texas Instruments\Z-Stack 3.0.2\Projects\zstack\HomeAutomation\MyLight\Source\zcl_MyLight.c
//    1 #include <stdio.h>
//    2 #include <stdlib.h>
//    3 
//    4 #include "ZComDef.h"
//    5 #include "OSAL.h"
//    6 #include "AF.h"
//    7 #include "ZDApp.h"
//    8 #include "ZDObject.h"
//    9 #include "MT_SYS.h"
//   10 
//   11 #include "nwk_util.h"
//   12 
//   13 #include "zcl.h"
//   14 #include "zcl_general.h"
//   15 #include "zcl_ha.h"
//   16 #include "zcl_diagnostic.h"
//   17 #include "zcl_MyLight.h"
//   18 
//   19 #include "bdb.h"
//   20 #include "bdb_interface.h"
//   21 #include "gp_interface.h"
//   22 
//   23 
//   24 
//   25 #if defined ( INTER_PAN )
//   26 #if defined ( BDB_TL_INITIATOR )
//   27   #include "bdb_touchlink_initiator.h"
//   28 #endif // BDB_TL_INITIATOR
//   29 #if defined ( BDB_TL_TARGET )
//   30   #include "bdb_touchlink_target.h"
//   31 #endif // BDB_TL_TARGET
//   32 #endif // INTER_PAN
//   33 
//   34 #if defined ( BDB_TL_INITIATOR ) || defined ( BDB_TL_TARGET )
//   35   #include "bdb_touchlink.h"
//   36 #endif
//   37 
//   38 #include "onboard.h"
//   39 
//   40 /* HAL */
//   41 #include "hal_lcd.h"
//   42 #include "hal_led.h"
//   43 #include "hal_key.h"
//   44 
//   45 // my library
//   46 #include "uart.h"
//   47 #include "bitmasks.h"
//   48 #include "delay.h"
//   49 #include "dht22.h"
//   50 
//   51 /*********************************************************************
//   52  * MACROS
//   53  */
//   54 
//   55 
//   56 /*********************************************************************
//   57  * CONSTANTS
//   58  */
//   59 
//   60 
//   61 /*********************************************************************
//   62  * TYPEDEFS
//   63  */
//   64 
//   65 /*********************************************************************
//   66  * GLOBAL VARIABLES
//   67  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   68 byte zclMyLight_TaskID;
zclMyLight_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   69 //int16 zclMyLight_MeasuredValue;

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   70 afAddrType_t zclMyLight_DstAddr;
zclMyLight_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//   71  

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//   72 float HumidityValue;
HumidityValue:
        DS 4
        REQUIRE __INIT_XDATA_Z
//   73 
//   74 /*********************************************************************
//   75  * GLOBAL FUNCTIONS
//   76  */
//   77  void zclMyLight_ReportLed( void );
//   78 /*********************************************************************
//   79  * LOCAL VARIABLES
//   80  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   81 uint8 SeqNum = 0;
SeqNum:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   82 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   83 uint8 giGenAppScreenMode = GENERIC_MAINMODE;   // display the main screen mode first
giGenAppScreenMode:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   84 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   85 uint8 gPermitDuration = 0;    // permit joining default to disabled
gPermitDuration:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   86 

        RSEG XDATA_I:XDATA:NOROOT(0)
//   87 devStates_t zclMyLight_NwkState = DEV_INIT;
zclMyLight_NwkState:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zclMyLight_NwkState>`
        REQUIRE __INIT_XDATA_I
//   88 
//   89 
//   90 /*********************************************************************
//   91  * LOCAL FUNCTIONS
//   92  */
//   93 static void zclMyLight_HandleKeys( byte shift, byte keys );
//   94 static void zclMyLight_BasicResetCB( void );
//   95 static void zclMyLight_ProcessIdentifyTimeChange( uint8 endpoint );
//   96 static void zclMyLight_BindNotification( bdbBindNotificationData_t *data );
//   97 #if ( defined ( BDB_TL_TARGET ) && (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE) )
//   98 static void zclMyLight_ProcessTouchlinkTargetEnable( uint8 enable );
//   99 #endif
//  100 
//  101 static void zclMyLight_ProcessCommissioningStatus(bdbCommissioningModeMsg_t *bdbCommissioningModeMsg);
//  102 
//  103 // app display functions
//  104 //static void zclMyLight_LcdDisplayUpdate( void );
//  105 #ifdef LCD_SUPPORTED
//  106 static void zclMyLight_LcdDisplayMainMode( void );
//  107 static void zclMyLight_LcdDisplayHelpMode( void );
//  108 #endif
//  109 
//  110 // Functions to process ZCL Foundation incoming Command/Response messages
//  111 static void zclMyLight_ProcessIncomingMsg( zclIncomingMsg_t *msg );
//  112 #ifdef ZCL_READ
//  113 static uint8 zclMyLight_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg );
//  114 #endif
//  115 #ifdef ZCL_WRITE
//  116 static uint8 zclMyLight_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg );
//  117 #endif
//  118 static uint8 zclMyLight_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg );
//  119 #ifdef ZCL_DISCOVER
//  120 static uint8 zclMyLight_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg );
//  121 static uint8 zclMyLight_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg );
//  122 static uint8 zclMyLight_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg );
//  123 #endif
//  124 
//  125 static void zclSampleApp_BatteryWarningCB( uint8 voltLevel);
//  126 
//  127 /*********************************************************************
//  128  * STATUS STRINGS
//  129  */
//  130 #ifdef LCD_SUPPORTED
//  131 const char sDeviceName[]   = "  Generic App";
//  132 const char sClearLine[]    = " ";
//  133 const char sSwMyLight[]      = "SW1:GENAPP_TODO";  // MYLIGHT_TODO
//  134 const char sSwBDBMode[]     = "SW2: Start BDB";
//  135 char sSwHelp[]             = "SW4: Help       ";  // last character is * if NWK open
//  136 #endif
//  137 
//  138 /*********************************************************************
//  139  * ZCL General Profile Callback table
//  140  */

        RSEG XDATA_I:XDATA:NOROOT(0)
//  141 static zclGeneral_AppCallbacks_t zclMyLight_CmdCallbacks =
zclMyLight_CmdCallbacks:
        DATA8
        DS 24
        REQUIRE `?<Initializer for zclMyLight_CmdCallbacks>`
        REQUIRE __INIT_XDATA_I
//  142 {
//  143   zclMyLight_BasicResetCB,             // Basic Cluster Reset command
//  144   NULL,                                   // Identify Trigger Effect command
//  145   NULL,                                   // On/Off cluster commands
//  146   NULL,                                   // On/Off cluster enhanced command Off with Effect
//  147   NULL,                                   // On/Off cluster enhanced command On with Recall Global Scene
//  148   NULL,                                   // On/Off cluster enhanced command On with Timed Off
//  149 #ifdef ZCL_LEVEL_CTRL
//  150   NULL,                                   // Level Control Move to Level command
//  151   NULL,                                   // Level Control Move command
//  152   NULL,                                   // Level Control Step command
//  153   NULL,                                   // Level Control Stop command
//  154 #endif
//  155 #ifdef ZCL_GROUPS
//  156   NULL,                                   // Group Response commands
//  157 #endif
//  158 #ifdef ZCL_SCENES
//  159   NULL,                                  // Scene Store Request command
//  160   NULL,                                  // Scene Recall Request command
//  161   NULL,                                  // Scene Response command
//  162 #endif
//  163 #ifdef ZCL_ALARMS
//  164   NULL,                                  // Alarm (Response) commands
//  165 #endif
//  166 #ifdef SE_UK_EXT
//  167   NULL,                                  // Get Event Log command
//  168   NULL,                                  // Publish Event Log command
//  169 #endif
//  170   NULL,                                  // RSSI Location command
//  171   NULL                                   // RSSI Location Response command
//  172 };
//  173 
//  174 /*********************************************************************
//  175  * MYLIGHT_TODO: Add other callback structures for any additional application specific 
//  176  *       Clusters being used, see available callback structures below.
//  177  *
//  178  *       bdbTL_AppCallbacks_t 
//  179  *       zclApplianceControl_AppCallbacks_t 
//  180  *       zclApplianceEventsAlerts_AppCallbacks_t 
//  181  *       zclApplianceStatistics_AppCallbacks_t 
//  182  *       zclElectricalMeasurement_AppCallbacks_t 
//  183  *       zclGeneral_AppCallbacks_t 
//  184  *       zclGp_AppCallbacks_t 
//  185  *       zclHVAC_AppCallbacks_t 
//  186  *       zclLighting_AppCallbacks_t 
//  187  *       zclMS_AppCallbacks_t 
//  188  *       zclPollControl_AppCallbacks_t 
//  189  *       zclPowerProfile_AppCallbacks_t 
//  190  *       zclSS_AppCallbacks_t  
//  191  *
//  192  */
//  193 
//  194 /*********************************************************************
//  195  * @fn          zclMyLight_Init
//  196  *
//  197  * @brief       Initialization function for the zclGeneral layer.
//  198  *
//  199  * @param       none
//  200  *
//  201  * @return      none
//  202  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  203 void zclMyLight_Init( byte task_id )
zclMyLight_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function zclMyLight_Init
        CODE
//  204 {
        FUNCALL zclMyLight_Init, bdb_RegisterSimpleDescriptor
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclMyLight_Init, zclGeneral_RegisterCmdCallbacks
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclMyLight_Init, zcl_registerAttrList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclMyLight_Init, zcl_registerForMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclMyLight_Init, RegisterVoltageWarningCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclMyLight_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclMyLight_Init, bdb_RegisterCommissioningStatusCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclMyLight_Init, bdb_RegisterIdentifyTimeChangeCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclMyLight_Init, bdb_RegisterBindNotificationCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclMyLight_Init, UART_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclMyLight_Init, osal_start_reload_timer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclMyLight_Init, UART_String
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclMyLight_Init, bdb_StartCommissioning
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R1
//  205   zclMyLight_TaskID = task_id;
        MOV       DPTR,#zclMyLight_TaskID
        MOVX      @DPTR,A
//  206 
//  207   // This app is part of the Home Automation Profile
//  208   bdb_RegisterSimpleDescriptor( &zclMyLight_SimpleDesc );
        ; Setup parameters for call to function bdb_RegisterSimpleDescriptor
        MOV       R2,#zclMyLight_SimpleDesc & 0xff
        MOV       R3,#(zclMyLight_SimpleDesc >> 8) & 0xff
        LCALL     `??bdb_RegisterSimpleDescriptor::?relay`; Banked call to: bdb_RegisterSimpleDescriptor
//  209   
//  210   // Register the ZCL General Cluster Library callback functions
//  211   zclGeneral_RegisterCmdCallbacks( MYLIGHT_ENDPOINT, &zclMyLight_CmdCallbacks );
        ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
        MOV       R2,#zclMyLight_CmdCallbacks & 0xff
        MOV       R3,#(zclMyLight_CmdCallbacks >> 8) & 0xff
        MOV       R1,#0x1
        LCALL     `??zclGeneral_RegisterCmdCallbacks::?relay`; Banked call to: zclGeneral_RegisterCmdCallbacks
//  212   
//  213   // MYLIGHT_TODO: Register other cluster command callbacks here
//  214 
//  215   // Register the application's attribute list
//  216   zcl_registerAttrList( MYLIGHT_ENDPOINT, zclMyLight_NumAttributes, zclMyLight_Attrs );
        ; Setup parameters for call to function zcl_registerAttrList
        MOV       R4,#zclMyLight_Attrs & 0xff
        MOV       R5,#(zclMyLight_Attrs >> 8) & 0xff
        MOV       DPTR,#zclMyLight_NumAttributes
        CLR       A
        MOVC      A,@A+DPTR
        MOV       R2,A
        MOV       R1,#0x1
        LCALL     `??zcl_registerAttrList::?relay`; Banked call to: zcl_registerAttrList
//  217 
//  218   // Register the Application to receive the unprocessed Foundation command/response messages
//  219   zcl_registerForMsg( zclMyLight_TaskID );
        ; Setup parameters for call to function zcl_registerForMsg
        MOV       DPTR,#zclMyLight_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??zcl_registerForMsg::?relay`; Banked call to: zcl_registerForMsg
//  220 
//  221 #ifdef ZCL_DISCOVER
//  222   // Register the application's command list
//  223   zcl_registerCmdList( MYLIGHT_ENDPOINT, zclCmdsArraySize, zclMyLight_Cmds );
//  224 #endif
//  225 
//  226   // Register low voltage NV memory protection application callback
//  227   RegisterVoltageWarningCB( zclSampleApp_BatteryWarningCB );
        ; Setup parameters for call to function RegisterVoltageWarningCB
        MOV       R2,#`??zclSampleApp_BatteryWarningCB::?relay` & 0xff
        MOV       R3,#(`??zclSampleApp_BatteryWarningCB::?relay` >> 8) & 0xff
        LCALL     `??RegisterVoltageWarningCB::?relay`; Banked call to: RegisterVoltageWarningCB
//  228 
//  229   // Register for all key events - This app will handle all key events
//  230   RegisterForKeys( zclMyLight_TaskID );
        ; Setup parameters for call to function RegisterForKeys
        MOV       DPTR,#zclMyLight_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
//  231 
//  232   bdb_RegisterCommissioningStatusCB( zclMyLight_ProcessCommissioningStatus );
        ; Setup parameters for call to function bdb_RegisterCommissioningStatusCB
        MOV       R2,#`??zclMyLight_ProcessCommissioningStatus::?relay` & 0xff
        MOV       R3,#(`??zclMyLight_ProcessCommissioningStatus::?relay` >> 8) & 0xff
        LCALL     `??bdb_RegisterCommissioningStatusCB::?relay`; Banked call to: bdb_RegisterCommissioningStatusCB
//  233   bdb_RegisterIdentifyTimeChangeCB( zclMyLight_ProcessIdentifyTimeChange );
        ; Setup parameters for call to function bdb_RegisterIdentifyTimeChangeCB
        MOV       R2,#`??zclMyLight_ProcessIdentifyTimeChange::?relay` & 0xff
        MOV       R3,#(`??zclMyLight_ProcessIdentifyTimeChange::?relay` >> 8) & 0xff
        LCALL     `??bdb_RegisterIdentifyTimeChangeCB::?relay`; Banked call to: bdb_RegisterIdentifyTimeChangeCB
//  234   bdb_RegisterBindNotificationCB( zclMyLight_BindNotification );
        ; Setup parameters for call to function bdb_RegisterBindNotificationCB
        MOV       R2,#`??zclMyLight_BindNotification::?relay` & 0xff
        MOV       R3,#(`??zclMyLight_BindNotification::?relay` >> 8) & 0xff
        LCALL     `??bdb_RegisterBindNotificationCB::?relay`; Banked call to: bdb_RegisterBindNotificationCB
//  235 
//  236 #if ( defined ( BDB_TL_TARGET ) && (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE) )
//  237   bdb_RegisterTouchlinkTargetEnableCB( zclMyLight_ProcessTouchlinkTargetEnable );
//  238 #endif
//  239 
//  240 #ifdef ZCL_DIAGNOSTIC
//  241   // Register the application's callback function to read/write attribute data.
//  242   // This is only required when the attribute data format is unknown to ZCL.
//  243   zcl_registerReadWriteCB( MYLIGHT_ENDPOINT, zclDiagnostic_ReadWriteAttrCB, NULL );
//  244 
//  245   if ( zclDiagnostic_InitStats() == ZSuccess )
//  246   {
//  247     // Here the user could start the timer to save Diagnostics to NV
//  248   }
//  249 #endif
//  250 
//  251 
//  252 #ifdef LCD_SUPPORTED
//  253   HalLcdWriteString ( (char *)sDeviceName, HAL_LCD_LINE_3 );
//  254 #endif  // LCD_SUPPORTED
//  255   P0SEL = b00001100;                    // 0=GPIO 1=Peripheral (ADC, UART)
        MOV       0xf3,#0xc
//  256 
//  257   P0SEL &= ~BV(6);
        ANL       0xf3,#0xbf
//  258   P0DIR |= BV(6);
        ORL       0xfd,#0x40
//  259   UART_Init();
        ; Setup parameters for call to function UART_Init
        LCALL     `??UART_Init::?relay`; Banked call to: UART_Init
//  260   
//  261 //  if (DHT22_Measure())
//  262 //  {
//  263 //    UART_String("Sensor type DHT22 detected.");
//  264 //  }
//  265 //  else 
//  266 //  {  
//  267 //    UART_String("No sensor detected");
//  268 //  }
//  269   
//  270   osal_start_reload_timer( zclMyLight_TaskID, MYLIGHT_REPORTING_EVT, 3000 );
        ; Setup parameters for call to function osal_start_reload_timer
        MOV       DPTR,#__Constant_bb8
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 13)
        MOV       R2,#0x8
        MOV       R3,#0x0
        MOV       DPTR,#zclMyLight_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_reload_timer::?relay`; Banked call to: osal_start_reload_timer
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
//  271   UART_String("start");
        ; Setup parameters for call to function UART_String
        MOV       R2,#`?<Constant "start">` & 0xff
        MOV       R3,#(`?<Constant "start">` >> 8) & 0xff
        LCALL     `??UART_String::?relay`; Banked call to: UART_String
//  272   bdb_StartCommissioning(BDB_COMMISSIONING_MODE_NWK_STEERING |
//  273                          BDB_COMMISSIONING_MODE_FINDING_BINDING);
        ; Setup parameters for call to function bdb_StartCommissioning
        MOV       R1,#0xa
        LCALL     `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
//  274 }
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock0
        REQUIRE P0SEL
        REQUIRE P0DIR
//  275 
//  276 /*********************************************************************
//  277  * @fn          zclSample_event_loop
//  278  *
//  279  * @brief       Event Loop Processor for zclGeneral.
//  280  *
//  281  * @param       none
//  282  *
//  283  * @return      none
//  284  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  285 uint16 zclMyLight_event_loop( uint8 task_id, uint16 events )
zclMyLight_event_loop:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function zclMyLight_event_loop
        CODE
//  286 {
        FUNCALL zclMyLight_event_loop, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclMyLight_event_loop, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclMyLight_event_loop, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclMyLight_event_loop, zclMyLight_ReportLed
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclMyLight_event_loop, bdb_StartCommissioning
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclMyLight_event_loop, bdb_resetLocalAction
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  287   afIncomingMSGPacket_t *MSGpkt;
//  288 
//  289   (void)task_id;  // Intentionally unreferenced parameter
//  290 
//  291   if ( events & SYS_EVENT_MSG )
        ANL       A,#0x80
        JNZ       ??zclMyLight_event_loop_0
//  292   {
//  293     while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zclMyLight_TaskID )) )
//  294     {
//  295       switch ( MSGpkt->hdr.event )
//  296       {
//  297         case ZCL_INCOMING_MSG:
//  298           // Incoming ZCL Foundation command/response messages
//  299           zclMyLight_ProcessIncomingMsg( (zclIncomingMsg_t *)MSGpkt );
//  300           break;
//  301 
//  302         case KEY_CHANGE:
//  303           zclMyLight_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  304           break;
//  305 
//  306         case ZDO_STATE_CHANGE:
//  307           zclMyLight_NwkState = (devStates_t)(MSGpkt->hdr.status);
//  308 
//  309           // now on the network
//  310           if ( (zclMyLight_NwkState == DEV_ZB_COORD) ||
//  311                (zclMyLight_NwkState == DEV_ROUTER)   ||
//  312                (zclMyLight_NwkState == DEV_END_DEVICE) )
//  313           {
//  314             giGenAppScreenMode = GENERIC_MAINMODE;
//  315 //            zclMyLight_LcdDisplayUpdate();
//  316           }
//  317           break;
//  318 
//  319         default:
//  320           break;
//  321       }
//  322 
//  323       // Release the memory
//  324       osal_msg_deallocate( (uint8 *)MSGpkt );
//  325     }
//  326 
//  327     // return unprocessed events
//  328     return (events ^ SYS_EVENT_MSG);
//  329   }
//  330 
//  331   if ( events & MYLIGHT_MAIN_SCREEN_EVT )
        MOV       A,R2
        MOV       C,0xE0 /* A   */.0
        JC        $+5
        LJMP      ??zclMyLight_event_loop_1 & 0xFFFF
//  332   {
//  333     giGenAppScreenMode = GENERIC_MAINMODE;
        MOV       DPTR,#giGenAppScreenMode
        CLR       A
        MOVX      @DPTR,A
//  334 
//  335 
//  336     return ( events ^ MYLIGHT_MAIN_SCREEN_EVT );
        MOV       A,R2
        XRL       A,#0x1
        LJMP      ??zclMyLight_event_loop_2 & 0xFFFF
//  337   }
??zclMyLight_event_loop_3:
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPTR,#zclMyLight_NwkState
        MOVX      @DPTR,A
        XRL       A,#0x9
        JZ        ??zclMyLight_event_loop_4
        MOVX      A,@DPTR
        XRL       A,#0x7
        JZ        ??zclMyLight_event_loop_4
        MOVX      A,@DPTR
        XRL       A,#0x6
        JNZ       ??zclMyLight_event_loop_5
??zclMyLight_event_loop_4:
        MOV       DPTR,#giGenAppScreenMode
        CLR       A
        MOVX      @DPTR,A
??zclMyLight_event_loop_5:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
??zclMyLight_event_loop_0:
        ; Setup parameters for call to function osal_msg_receive
        MOV       DPTR,#zclMyLight_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       A,R2
        ORL       A,R3
        JNZ       $+5
        LJMP      ??zclMyLight_event_loop_6 & 0xFFFF
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        ADD       A,#-0x34
        JZ        ??zclMyLight_event_loop_7
        ADD       A,#0x74
        JZ        ??zclMyLight_event_loop_8
        ADD       A,#-0x11
        JZ        ??zclMyLight_event_loop_3
        SJMP      ??zclMyLight_event_loop_5
??zclMyLight_event_loop_7:
        MOV       A,R2
        ADD       A,#0x17
        MOV       R0,A
        CLR       A
        ADDC      A,?V1
        MOV       R1,A
        MOV       A,R0
        MOV       R2,A
        MOV       A,R1
        MOV       R3,A
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        DEC       A
        JZ        ??zclMyLight_event_loop_9
        ADD       A,#-0x3
        JNZ       ??zclMyLight_event_loop_10
        LCALL     ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_0:
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        CLR       C
        SUBB      A,R1
        JNC       ??zclMyLight_event_loop_10
        INC       R0
        SJMP      ??CrossCallReturnLabel_0
??zclMyLight_event_loop_9:
        LCALL     ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_1:
        SJMP      ??zclMyLight_event_loop_11
??zclMyLight_event_loop_12:
        INC       R0
??zclMyLight_event_loop_11:
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        CLR       C
        SUBB      A,R1
        JC        ??zclMyLight_event_loop_12
??zclMyLight_event_loop_10:
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       A,R2
        ORL       A,R3
        JZ        ??zclMyLight_event_loop_5
        ; Setup parameters for call to function osal_mem_free
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        SJMP      ??zclMyLight_event_loop_5
??zclMyLight_event_loop_8:
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V2,A
        MOV       C,0xE0 /* A   */.0
        JNC       ??zclMyLight_event_loop_13
        MOV       DPTR,#ledState
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??zclMyLight_event_loop_14
        CLR       A
        SJMP      ??zclMyLight_event_loop_15
??zclMyLight_event_loop_14:
        MOV       A,#0x1
??zclMyLight_event_loop_15:
        MOVX      @DPTR,A
        ; Setup parameters for call to function zclMyLight_ReportLed
        LCALL     `??zclMyLight_ReportLed::?relay`; Banked call to: zclMyLight_ReportLed
??zclMyLight_event_loop_13:
        MOV       A,?V2
        MOV       C,0xE0 /* A   */.1
        JNC       ??zclMyLight_event_loop_16
        MOV       DPTR,#giGenAppScreenMode
        CLR       A
        MOVX      @DPTR,A
        ; Setup parameters for call to function bdb_StartCommissioning
        MOV       R1,#0xf
        LCALL     `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
??zclMyLight_event_loop_16:
        MOV       A,?V2
        MOV       C,0xE0 /* A   */.4
        JNC       ??zclMyLight_event_loop_17
        MOV       DPTR,#giGenAppScreenMode
        CLR       A
        MOVX      @DPTR,A
??zclMyLight_event_loop_17:
        MOV       A,?V2
        MOV       C,0xE0 /* A   */.3
        JNC       ??zclMyLight_event_loop_18
        MOV       DPTR,#giGenAppScreenMode
        MOVX      A,@DPTR
        JZ        ??zclMyLight_event_loop_19
        CLR       A
        SJMP      ??zclMyLight_event_loop_20
??zclMyLight_event_loop_19:
        MOV       A,#0x1
??zclMyLight_event_loop_20:
        MOVX      @DPTR,A
??zclMyLight_event_loop_18:
        MOV       A,?V2
        MOV       C,0xE0 /* A   */.2
        JC        $+5
        LJMP      ??zclMyLight_event_loop_5 & 0xFFFF
        ; Setup parameters for call to function bdb_resetLocalAction
        LCALL     `??bdb_resetLocalAction::?relay`; Banked call to: bdb_resetLocalAction
        LJMP      ??zclMyLight_event_loop_5 & 0xFFFF
??zclMyLight_event_loop_6:
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        XRL       A,#0x80
        MOV       R3,A
        SJMP      ??zclMyLight_event_loop_21
//  338   
//  339 #if ZG_BUILD_ENDDEVICE_TYPE    
//  340   if ( events & MYLIGHT_END_DEVICE_REJOIN_EVT )
//  341   {
//  342     bdb_ZedAttemptRecoverNwk();
//  343     return ( events ^ MYLIGHT_END_DEVICE_REJOIN_EVT );
//  344   }
//  345 #endif
//  346 
//  347   /* MYLIGHT_TODO: handle app events here */
//  348   
//  349 //  if ( events & MYLIGHT_EVT_LONG )
//  350 //  {
//  351 //    if ( bdbAttributes.bdbNodeIsOnANetwork )
//  352 //    {
//  353 //      zclMyLight_LeaveNetwork();
//  354 //    }
//  355 //    else 
//  356 //    {
//  357 //      bdb_StartCommissioning(
//  358 //        BDB_COMMISSIONING_MODE_NWK_FORMATION | 
//  359 //        BDB_COMMISSIONING_MODE_NWK_STEERING | 
//  360 //        BDB_COMMISSIONING_MODE_FINDING_BINDING | 
//  361 //        BDB_COMMISSIONING_MODE_INITIATOR_TL
//  362 //      );
//  363 //    }
//  364 //    
//  365 //    return ( events ^ MYLIGHT_EVT_LONG );
//  366 //  }
//  367   
//  368   if ( events & MYLIGHT_REPORTING_EVT )
??zclMyLight_event_loop_1:
        ANL       A,#0x8
        JZ        ??zclMyLight_event_loop_22
//  369   {
//  370     // toggle LED 2 state, start another timer for 500ms
//  371     //HalLedSet ( HAL_LED_2, HAL_LED_MODE_TOGGLE );
//  372     //osal_start_timerEx( zclMyLight_TaskID, MYLIGHT_REPORTING_EVT, 3000 );
//  373 //    P0_6 = ~P0_6;
//  374 //    DHT22_Measure();
//  375 //    zclMyLight_ReportTemp();
//  376     return ( events ^ MYLIGHT_REPORTING_EVT );
        MOV       A,R2
        XRL       A,#0x8
??zclMyLight_event_loop_2:
        MOV       R2,A
        SJMP      ??zclMyLight_event_loop_21
//  377   }
//  378   
//  379   /*
//  380   if ( events & MYLIGHT_EVT_2 )
//  381   {
//  382     DHT22_Measure();
//  383     return ( events ^ MYLIGHT_EVT_2 );
//  384   }
//  385   
//  386   if ( events & MYLIGHT_EVT_3 )
//  387   {
//  388     
//  389     return ( events ^ MYLIGHT_EVT_3 );
//  390   }
//  391   */
//  392   
//  393   // Discard unknown events
//  394   return 0;
??zclMyLight_event_loop_22:
        MOV       R2,#0x0
        MOV       R3,#0x0
??zclMyLight_event_loop_21:
          CFI EndBlock cfiBlock1
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0
//  395 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x4
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock2

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiCond3 Using cfiCommon0
          CFI Function zclMyLight_event_loop
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond4 Using cfiCommon0
          CFI (cfiCond4) Function zclMyLight_event_loop
          CFI (cfiCond4) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond4) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond4) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond4) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond4) CFA_SP SP+-2
          CFI (cfiCond4) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker5 Using cfiCommon1
          CFI (cfiPicker5) NoFunction
          CFI (cfiPicker5) Picker
        MOV       DPL,R0
        MOV       DPH,R1
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPL,R0
        MOV       DPH,A
        MOV       R0,#0x0
        RET
          CFI EndBlock cfiCond3
          CFI EndBlock cfiCond4
          CFI EndBlock cfiPicker5
//  396 
//  397 
//  398 /*********************************************************************
//  399  * @fn      zclMyLight_HandleKeys
//  400  *
//  401  * @brief   Handles all key events for this device.
//  402  *
//  403  * @param   shift - true if in shift/alt.
//  404  * @param   keys - bit field for key events. Valid entries:
//  405  *                 HAL_KEY_SW_5
//  406  *                 HAL_KEY_SW_4
//  407  *                 HAL_KEY_SW_2
//  408  *                 HAL_KEY_SW_1
//  409  *
//  410  * @return  none
//  411  */
//  412 static void zclMyLight_HandleKeys( byte shift, byte keys )
//  413 {
//  414   if ( keys & HAL_KEY_SW_1 )
//  415   {
//  416     if(ledState == 1){
//  417       ledState = 0;
//  418     } else 
//  419     {
//  420       ledState = 1;
//  421     }
//  422     zclMyLight_ReportLed();
//  423   }
//  424   // Start the BDB commissioning method
//  425   if ( keys & HAL_KEY_SW_2 )
//  426   {
//  427     giGenAppScreenMode = GENERIC_MAINMODE;
//  428 
//  429     bdb_StartCommissioning(BDB_COMMISSIONING_MODE_NWK_FORMATION | BDB_COMMISSIONING_MODE_NWK_STEERING | BDB_COMMISSIONING_MODE_FINDING_BINDING | BDB_COMMISSIONING_MODE_INITIATOR_TL);
//  430   }
//  431   if ( keys & HAL_KEY_SW_3 )
//  432   {
//  433     giGenAppScreenMode = GENERIC_MAINMODE;
//  434   
//  435     // touchlink target commissioning, if enabled  
//  436 #if ( defined ( BDB_TL_TARGET ) && (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE) )
//  437     bdb_StartCommissioning(BDB_COMMISSIONING_MODE_FINDING_BINDING);
//  438     touchLinkTarget_EnableCommissioning( 30000 );
//  439 #endif
//  440     
//  441   }
//  442   if ( keys & HAL_KEY_SW_4 )
//  443   {
//  444     
//  445    giGenAppScreenMode = giGenAppScreenMode ? GENERIC_MAINMODE : GENERIC_HELPMODE;
//  446 #ifdef LCD_SUPPORTED
//  447     HalLcdWriteString( (char *)sClearLine, HAL_LCD_LINE_2 );
//  448 #endif
//  449     
//  450   }
//  451   if ( keys & HAL_KEY_SW_5 )
//  452   {
//  453     bdb_resetLocalAction();
//  454   }
//  455 }
//  456 
//  457 
//  458 /*********************************************************************
//  459  * @fn      zclMyLight_ProcessCommissioningStatus
//  460  *
//  461  * @brief   Callback in which the status of the commissioning process are reported
//  462  *
//  463  * @param   bdbCommissioningModeMsg - Context message of the status of a commissioning process
//  464  *
//  465  * @return  none
//  466  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  467 static void zclMyLight_ProcessCommissioningStatus(bdbCommissioningModeMsg_t *bdbCommissioningModeMsg)
zclMyLight_ProcessCommissioningStatus:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function zclMyLight_ProcessCommissioningStatus
        CODE
//  468 {
        FUNCALL zclMyLight_ProcessCommissioningStatus, bdb_StartCommissioning
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  469   switch(bdbCommissioningModeMsg->bdbCommissioningMode)
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0x2
        JNZ       ??zclMyLight_ProcessCommissioningStatus_0
//  470   {
//  471     case BDB_COMMISSIONING_FORMATION:
//  472       if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        JNZ       ??zclMyLight_ProcessCommissioningStatus_0
//  473       {
//  474         //After formation, perform nwk steering again plus the remaining commissioning modes that has not been process yet
//  475         bdb_StartCommissioning(BDB_COMMISSIONING_MODE_NWK_STEERING | bdbCommissioningModeMsg->bdbRemainingCommissioningModes);
        ; Setup parameters for call to function bdb_StartCommissioning
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        ORL       A,#0x2
        MOV       R1,A
        LCALL     `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
//  476       }
//  477       else
//  478       {
//  479         //Want to try other channels?
//  480         //try with bdb_setChannelAttribute
//  481       }
//  482     break;
//  483     case BDB_COMMISSIONING_NWK_STEERING:
//  484       if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
//  485       {
//  486         //YOUR JOB:
//  487         //We are on the nwk, what now?
//  488       }
//  489       else
//  490       {
//  491         //See the possible errors for nwk steering procedure
//  492         //No suitable networks found
//  493         //Want to try other channels?
//  494         //try with bdb_setChannelAttribute
//  495       }
//  496     break;
//  497     case BDB_COMMISSIONING_FINDING_BINDING:
//  498       if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
//  499       {
//  500         //YOUR JOB:
//  501       }
//  502       else
//  503       {
//  504         //YOUR JOB:
//  505         //retry?, wait for user interaction?
//  506       }
//  507     break;
//  508     case BDB_COMMISSIONING_INITIALIZATION:
//  509       //Initialization notification can only be successful. Failure on initialization
//  510       //only happens for ZED and is notified as BDB_COMMISSIONING_PARENT_LOST notification
//  511 
//  512       //YOUR JOB:
//  513       //We are on a network, what now?
//  514 
//  515     break;
//  516 #if ZG_BUILD_ENDDEVICE_TYPE    
//  517     case BDB_COMMISSIONING_PARENT_LOST:
//  518       if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_NETWORK_RESTORED)
//  519       {
//  520         //We did recover from losing parent
//  521       }
//  522       else
//  523       {
//  524         //Parent not found, attempt to rejoin again after a fixed delay
//  525         osal_start_timerEx(zclMyLight_TaskID, MYLIGHT_END_DEVICE_REJOIN_EVT, MYLIGHT_END_DEVICE_REJOIN_DELAY);
//  526       }
//  527     break;
//  528 #endif 
//  529   }
//  530 }
??zclMyLight_ProcessCommissioningStatus_0:
          CFI EndBlock cfiBlock6
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP       DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP       DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP      ?BRET
          CFI EndBlock cfiBlock7
//  531 
//  532 /*********************************************************************
//  533  * @fn      zclMyLight_ProcessIdentifyTimeChange
//  534  *
//  535  * @brief   Called to process any change to the IdentifyTime attribute.
//  536  *
//  537  * @param   endpoint - in which the identify has change
//  538  *
//  539  * @return  none
//  540  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  541 static void zclMyLight_ProcessIdentifyTimeChange( uint8 endpoint )
zclMyLight_ProcessIdentifyTimeChange:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI Function zclMyLight_ProcessIdentifyTimeChange
        CODE
//  542 {
        FUNCALL zclMyLight_ProcessIdentifyTimeChange, HalLedBlink
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclMyLight_ProcessIdentifyTimeChange, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  543   (void) endpoint;
//  544 
//  545   if ( zclMyLight_IdentifyTime > 0 )
        MOV       DPTR,#zclMyLight_IdentifyTime
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JZ        ??zclMyLight_ProcessIdentifyTimeChange_0
//  546   {
//  547     HalLedBlink ( HAL_LED_2, 0xFF, HAL_LED_DEFAULT_DUTY_CYCLE, HAL_LED_DEFAULT_FLASH_TIME );
        ; Setup parameters for call to function HalLedBlink
        MOV       R4,#-0x18
        MOV       R5,#0x3
        MOV       R3,#0x5
        MOV       R2,#-0x1
        MOV       R1,#0x2
        LCALL     `??HalLedBlink::?relay`; Banked call to: HalLedBlink
        SJMP      ??zclMyLight_ProcessIdentifyTimeChange_1
//  548   }
//  549   else
//  550   {
//  551     HalLedSet ( HAL_LED_2, HAL_LED_MODE_OFF );
??zclMyLight_ProcessIdentifyTimeChange_0:
        ; Setup parameters for call to function HalLedSet
        MOV       R2,#0x0
        MOV       R1,#0x2
        LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
//  552   }
//  553 }
??zclMyLight_ProcessIdentifyTimeChange_1:
        SJMP      ?Subroutine1
          CFI EndBlock cfiBlock8
//  554 
//  555 /*********************************************************************
//  556  * @fn      zclMyLight_BindNotification
//  557  *
//  558  * @brief   Called when a new bind is added.
//  559  *
//  560  * @param   data - pointer to new bind data
//  561  *
//  562  * @return  none
//  563  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  564 static void zclMyLight_BindNotification( bdbBindNotificationData_t *data )
zclMyLight_BindNotification:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI Function zclMyLight_BindNotification
        CODE
//  565 {
        ; Saved register size: 0
        ; Auto size: 0
//  566   // MYLIGHT_TODO: process the new bind information
//  567 }
        LJMP      ?BRET
          CFI EndBlock cfiBlock9
//  568 
//  569 
//  570 /*********************************************************************
//  571  * @fn      zclMyLight_ProcessTouchlinkTargetEnable
//  572  *
//  573  * @brief   Called to process when the touchlink target functionality
//  574  *          is enabled or disabled
//  575  *
//  576  * @param   none
//  577  *
//  578  * @return  none
//  579  */
//  580 #if ( defined ( BDB_TL_TARGET ) && (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE) )
//  581 static void zclMyLight_ProcessTouchlinkTargetEnable( uint8 enable )
//  582 {
//  583   if ( enable )
//  584   {
//  585     HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
//  586   }
//  587   else
//  588   {
//  589     HalLedSet ( HAL_LED_1, HAL_LED_MODE_OFF );
//  590   }
//  591 }
//  592 #endif
//  593 
//  594 /*********************************************************************
//  595  * @fn      zclMyLight_BasicResetCB
//  596  *
//  597  * @brief   Callback from the ZCL General Cluster Library
//  598  *          to set all the Basic Cluster attributes to default values.
//  599  *
//  600  * @param   none
//  601  *
//  602  * @return  none
//  603  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  604 static void zclMyLight_BasicResetCB( void )
zclMyLight_BasicResetCB:
          CFI Block cfiBlock10 Using cfiCommon0
          CFI Function zclMyLight_BasicResetCB
        CODE
//  605 {
        FUNCALL zclMyLight_BasicResetCB, zclMyLight_ResetAttributesToDefaultValues
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  606 
//  607   /* MYLIGHT_TODO: remember to update this function with any
//  608      application-specific cluster attribute variables */
//  609   
//  610   zclMyLight_ResetAttributesToDefaultValues();
        ; Setup parameters for call to function zclMyLight_ResetAttributesToDefaultValues
        LCALL     `??zclMyLight_ResetAttributesToDefaultValues::?r`; Banked call to: zclMyLight_ResetAttributesToDefaultValues
//  611   
//  612 }
        SJMP      ?Subroutine1
          CFI EndBlock cfiBlock10
//  613 /*********************************************************************
//  614  * @fn      zclSampleApp_BatteryWarningCB
//  615  *
//  616  * @brief   Called to handle battery-low situation.
//  617  *
//  618  * @param   voltLevel - level of severity
//  619  *
//  620  * @return  none
//  621  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  622 void zclSampleApp_BatteryWarningCB( uint8 voltLevel )
zclSampleApp_BatteryWarningCB:
          CFI Block cfiBlock11 Using cfiCommon0
          CFI Function zclSampleApp_BatteryWarningCB
        CODE
//  623 {
        ; Saved register size: 0
        ; Auto size: 0
//  624   if ( voltLevel == VOLT_LEVEL_CAUTIOUS )
//  625   {
//  626     // Send warning message to the gateway and blink LED
//  627   }
//  628   else if ( voltLevel == VOLT_LEVEL_BAD )
//  629   {
//  630     // Shut down the system
//  631   }
//  632 }
        LJMP      ?BRET
          CFI EndBlock cfiBlock11
//  633 
//  634 /******************************************************************************
//  635  *
//  636  *  Functions for processing ZCL Foundation incoming Command/Response messages
//  637  *
//  638  *****************************************************************************/
//  639 
//  640 /*********************************************************************
//  641  * @fn      zclMyLight_ProcessIncomingMsg
//  642  *
//  643  * @brief   Process ZCL Foundation incoming message
//  644  *
//  645  * @param   pInMsg - pointer to the received message
//  646  *
//  647  * @return  none
//  648  */
//  649 static void zclMyLight_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg )
//  650 {
//  651   switch ( pInMsg->zclHdr.commandID )
//  652   {
//  653 #ifdef ZCL_READ
//  654     case ZCL_CMD_READ_RSP:
//  655       zclMyLight_ProcessInReadRspCmd( pInMsg );
//  656       break;
//  657 #endif
//  658 #ifdef ZCL_WRITE
//  659     case ZCL_CMD_WRITE_RSP:
//  660       zclMyLight_ProcessInWriteRspCmd( pInMsg );
//  661       break;
//  662 #endif
//  663     case ZCL_CMD_CONFIG_REPORT:
//  664     case ZCL_CMD_CONFIG_REPORT_RSP:
//  665     case ZCL_CMD_READ_REPORT_CFG:
//  666     case ZCL_CMD_READ_REPORT_CFG_RSP:
//  667     case ZCL_CMD_REPORT:
//  668       //bdb_ProcessIncomingReportingMsg( pInMsg );
//  669       break;
//  670       
//  671     case ZCL_CMD_DEFAULT_RSP:
//  672       zclMyLight_ProcessInDefaultRspCmd( pInMsg );
//  673       break;
//  674 #ifdef ZCL_DISCOVER
//  675     case ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP:
//  676       zclMyLight_ProcessInDiscCmdsRspCmd( pInMsg );
//  677       break;
//  678 
//  679     case ZCL_CMD_DISCOVER_CMDS_GEN_RSP:
//  680       zclMyLight_ProcessInDiscCmdsRspCmd( pInMsg );
//  681       break;
//  682 
//  683     case ZCL_CMD_DISCOVER_ATTRS_RSP:
//  684       zclMyLight_ProcessInDiscAttrsRspCmd( pInMsg );
//  685       break;
//  686 
//  687     case ZCL_CMD_DISCOVER_ATTRS_EXT_RSP:
//  688       zclMyLight_ProcessInDiscAttrsExtRspCmd( pInMsg );
//  689       break;
//  690 #endif
//  691     default:
//  692       break;
//  693   }
//  694 
//  695   if ( pInMsg->attrCmd )
//  696     osal_mem_free( pInMsg->attrCmd );
//  697 }
//  698 
//  699 #ifdef ZCL_READ
//  700 /*********************************************************************
//  701  * @fn      zclMyLight_ProcessInReadRspCmd
//  702  *
//  703  * @brief   Process the "Profile" Read Response Command
//  704  *
//  705  * @param   pInMsg - incoming message to process
//  706  *
//  707  * @return  none
//  708  */
//  709 static uint8 zclMyLight_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg )
//  710 {
//  711   zclReadRspCmd_t *readRspCmd;
//  712   uint8 i;
//  713 
//  714   readRspCmd = (zclReadRspCmd_t *)pInMsg->attrCmd;
//  715   for (i = 0; i < readRspCmd->numAttr; i++)
//  716   {
//  717     // Notify the originator of the results of the original read attributes
//  718     // attempt and, for each successfull request, the value of the requested
//  719     // attribute
//  720   }
//  721 
//  722   return ( TRUE );
//  723 }
//  724 #endif // ZCL_READ
//  725 
//  726 #ifdef ZCL_WRITE
//  727 /*********************************************************************
//  728  * @fn      zclMyLight_ProcessInWriteRspCmd
//  729  *
//  730  * @brief   Process the "Profile" Write Response Command
//  731  *
//  732  * @param   pInMsg - incoming message to process
//  733  *
//  734  * @return  none
//  735  */
//  736 static uint8 zclMyLight_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg )
//  737 {
//  738   zclWriteRspCmd_t *writeRspCmd;
//  739   uint8 i;
//  740 
//  741   writeRspCmd = (zclWriteRspCmd_t *)pInMsg->attrCmd;
//  742   for ( i = 0; i < writeRspCmd->numAttr; i++ )
//  743   {
//  744     // Notify the device of the results of the its original write attributes
//  745     // command.
//  746   }
//  747 
//  748   return ( TRUE );
//  749 }
//  750 #endif // ZCL_WRITE
//  751 
//  752 /*********************************************************************
//  753  * @fn      zclMyLight_ProcessInDefaultRspCmd
//  754  *
//  755  * @brief   Process the "Profile" Default Response Command
//  756  *
//  757  * @param   pInMsg - incoming message to process
//  758  *
//  759  * @return  none
//  760  */
//  761 static uint8 zclMyLight_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg )
//  762 {
//  763   // zclDefaultRspCmd_t *defaultRspCmd = (zclDefaultRspCmd_t *)pInMsg->attrCmd;
//  764 
//  765   // Device is notified of the Default Response command.
//  766   (void)pInMsg;
//  767 
//  768   return ( TRUE );
//  769 }
//  770 
//  771 #ifdef ZCL_DISCOVER
//  772 /*********************************************************************
//  773  * @fn      zclMyLight_ProcessInDiscCmdsRspCmd
//  774  *
//  775  * @brief   Process the Discover Commands Response Command
//  776  *
//  777  * @param   pInMsg - incoming message to process
//  778  *
//  779  * @return  none
//  780  */
//  781 static uint8 zclMyLight_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg )
//  782 {
//  783   zclDiscoverCmdsCmdRsp_t *discoverRspCmd;
//  784   uint8 i;
//  785 
//  786   discoverRspCmd = (zclDiscoverCmdsCmdRsp_t *)pInMsg->attrCmd;
//  787   for ( i = 0; i < discoverRspCmd->numCmd; i++ )
//  788   {
//  789     // Device is notified of the result of its attribute discovery command.
//  790   }
//  791 
//  792   return ( TRUE );
//  793 }
//  794 
//  795 /*********************************************************************
//  796  * @fn      zclMyLight_ProcessInDiscAttrsRspCmd
//  797  *
//  798  * @brief   Process the "Profile" Discover Attributes Response Command
//  799  *
//  800  * @param   pInMsg - incoming message to process
//  801  *
//  802  * @return  none
//  803  */
//  804 static uint8 zclMyLight_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg )
//  805 {
//  806   zclDiscoverAttrsRspCmd_t *discoverRspCmd;
//  807   uint8 i;
//  808 
//  809   discoverRspCmd = (zclDiscoverAttrsRspCmd_t *)pInMsg->attrCmd;
//  810   for ( i = 0; i < discoverRspCmd->numAttr; i++ )
//  811   {
//  812     // Device is notified of the result of its attribute discovery command.
//  813   }
//  814 
//  815   return ( TRUE );
//  816 }
//  817 
//  818 /*********************************************************************
//  819  * @fn      zclMyLight_ProcessInDiscAttrsExtRspCmd
//  820  *
//  821  * @brief   Process the "Profile" Discover Attributes Extended Response Command
//  822  *
//  823  * @param   pInMsg - incoming message to process
//  824  *
//  825  * @return  none
//  826  */
//  827 static uint8 zclMyLight_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg )
//  828 {
//  829   zclDiscoverAttrsExtRsp_t *discoverRspCmd;
//  830   uint8 i;
//  831 
//  832   discoverRspCmd = (zclDiscoverAttrsExtRsp_t *)pInMsg->attrCmd;
//  833   for ( i = 0; i < discoverRspCmd->numAttr; i++ )
//  834   {
//  835     // Device is notified of the result of its attribute discovery command.
//  836   }
//  837 
//  838   return ( TRUE );
//  839 }
//  840 #endif // ZCL_DISCOVER
//  841 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  842 void zclMyLight_ReportLed( void )
zclMyLight_ReportLed:
          CFI Block cfiBlock12 Using cfiCommon0
          CFI Function zclMyLight_ReportLed
        CODE
//  843 {
        FUNCALL zclMyLight_ReportLed, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclMyLight_ReportLed, zcl_SendReportCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclMyLight_ReportLed, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
//  844   // ?????? ???????????
//  845   const uint8 NUM_ATTRIBUTES = 1;
//  846 
//  847   zclReportCmd_t *pReportCmd;
//  848 
//  849   pReportCmd = osal_mem_alloc(sizeof(zclReportCmd_t) +
//  850                               (NUM_ATTRIBUTES * sizeof(zclReport_t)));
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0x6
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V0,R2
        MOV       ?V1,R3
//  851   if (pReportCmd != NULL) {
        MOV       A,R2
        ORL       A,R3
        JZ        ??zclMyLight_ReportLed_0
//  852     pReportCmd->numAttr = NUM_ATTRIBUTES;
        MOV       DPL,R2
        MOV       DPH,R3
        MOV       A,#0x1
        MOVX      @DPTR,A
//  853 
//  854     pReportCmd->attrList[0].attrID = ATTRID_ON_OFF;
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        LCALL     ?Subroutine3 & 0xFFFF
//  855     pReportCmd->attrList[0].dataType = ZCL_DATATYPE_BOOLEAN;
??CrossCallReturnLabel_2:
        MOV       A,#0x10
        LCALL     ?Subroutine3 & 0xFFFF
//  856     pReportCmd->attrList[0].attrData = (void *)(&ledState);
??CrossCallReturnLabel_3:
        INC       DPTR
        MOV       A,#ledState & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(ledState >> 8) & 0xff
        MOVX      @DPTR,A
//  857     
//  858     zclMyLight_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
        MOV       DPTR,#zclMyLight_DstAddr + 8
        MOV       A,#0x2
        MOVX      @DPTR,A
//  859     zclMyLight_DstAddr.addr.shortAddr = 0;
        MOV       DPTR,#zclMyLight_DstAddr
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  860     zclMyLight_DstAddr.endPoint = 1;
        MOV       DPTR,#zclMyLight_DstAddr + 9
        INC       A
        MOVX      @DPTR,A
//  861 
//  862     zcl_SendReportCmd(MYLIGHT_ENDPOINT, &zclMyLight_DstAddr,
//  863                       ZCL_CLUSTER_ID_GEN_ON_OFF, pReportCmd,
//  864                       ZCL_FRAME_CLIENT_SERVER_DIR, false, SeqNum++);
        MOV       DPTR,#SeqNum
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,#0x1
        ADD       A,R0
        MOVX      @DPTR,A
        ; Setup parameters for call to function zcl_SendReportCmd
        MOV       A,R0
        MOV       ?V2,A
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 13)
        MOV       ?V2,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 15)
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 17)
        MOV       R4,#0x6
        MOV       R5,#0x0
        MOV       R2,#zclMyLight_DstAddr & 0xff
        MOV       R3,#(zclMyLight_DstAddr >> 8) & 0xff
        MOV       R1,#0x1
        LCALL     `??zcl_SendReportCmd::?relay`; Banked call to: zcl_SendReportCmd
        MOV       A,#0x5
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
//  865   }
//  866 
//  867   osal_mem_free(pReportCmd);
??zclMyLight_ReportLed_0:
        ; Setup parameters for call to function osal_mem_free
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
//  868 }
        LJMP      ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock12

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiCond13 Using cfiCommon0
          CFI Function zclMyLight_ReportLed
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond14 Using cfiCommon0
          CFI (cfiCond14) Function zclMyLight_ReportLed
          CFI (cfiCond14) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond14) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond14) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond14) CFA_SP SP+-2
          CFI (cfiCond14) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker15 Using cfiCommon1
          CFI (cfiPicker15) NoFunction
          CFI (cfiPicker15) Picker
        MOVX      @DPTR,A
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond13
          CFI EndBlock cfiCond14
          CFI EndBlock cfiPicker15

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zclMyLight_NwkState>`:
        DATA8
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zclMyLight_CmdCallbacks>`:
        DATA16
        DW `??zclMyLight_BasicResetCB::?relay`
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclMyLight_Init::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclMyLight_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclMyLight_event_loop::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclMyLight_event_loop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclMyLight_ProcessCommissioningStatus::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclMyLight_ProcessCommissioningStatus

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclMyLight_ProcessIdentifyTimeChange::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclMyLight_ProcessIdentifyTimeChange

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclMyLight_BindNotification::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclMyLight_BindNotification

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclMyLight_BasicResetCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclMyLight_BasicResetCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleApp_BatteryWarningCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleApp_BatteryWarningCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclMyLight_ReportLed::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclMyLight_ReportLed

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "start">`:
        DB "start"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_bb8:
        DD 3000

        END
//  869 /****************************************************************************
//  870 ****************************************************************************/
//  871 
//  872 
// 
// 668 bytes in segment BANKED_CODE
//  48 bytes in segment BANK_RELAYS
//   2 bytes in segment SFR_AN
//  25 bytes in segment XDATA_I
//  25 bytes in segment XDATA_ID
//  10 bytes in segment XDATA_ROM_C
//  20 bytes in segment XDATA_Z
// 
//  73 bytes of CODE     memory
//   6 bytes of CONST    memory (+ 4 bytes shared)
//   0 bytes of DATA     memory (+ 2 bytes shared)
// 668 bytes of HUGECODE memory
//  45 bytes of XDATA    memory
//
//Errors: none
//Warnings: none
